# Nginx configuration for AnyCrawl MCP Server
# This configuration proxies /{API_KEY}/sse requests to the FastMCP server
# and adds the API_KEY as x-anycrawl-api-key header
# Based on firecrawl-mcp-server configuration patterns

# PID file location
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # Enable gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=sse:10m rate=5r/s;

    # Upstream backend server
    upstream anycrawl_backend {
        server 127.0.0.1:3000 max_fails=3 fail_timeout=30s;
        # Add more servers for load balancing if needed
        # server 127.0.0.1:3001 max_fails=3 fail_timeout=30s;
        # server 127.0.0.1:3002 max_fails=3 fail_timeout=30s;
    }

    # Main server block
    server {
        listen 80;
        server_name localhost;  # Change to your domain
        client_max_body_size 10M;

        # Security headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # CORS headers for MCP clients
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, x-anycrawl-api-key, Authorization, X-Requested-With" always;
        add_header Access-Control-Expose-Headers "Mcp-Session-Id" always;
        add_header Access-Control-Max-Age 86400 always;

        # Main proxy location for /{API_KEY}/sse
        location ~ ^/(?<api_key>[^/]+)/sse$ {
            # Handle preflight OPTIONS requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "*";
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
                add_header Access-Control-Allow-Headers "Content-Type, x-anycrawl-api-key, Authorization, X-Requested-With";
                add_header Access-Control-Max-Age 86400;
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }
            
            # Apply rate limiting for SSE connections
            limit_req zone=sse burst=10 nodelay;
            
            # Validate API key format (basic validation)
            if ($api_key ~ "^[^a-zA-Z0-9_-]") {
                return 400 "Invalid API key format";
            }

            # Rewrite the request to include /mcp path
            rewrite ^/(?<api_key>[^/]+)/sse$ /mcp break;
            
            # Proxy to backend server
            proxy_pass http://anycrawl_backend;
            
            # Add the API key as x-anycrawl-api-key header
            proxy_set_header x-anycrawl-api-key $api_key;
            
            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            
            # SSE specific headers
            proxy_set_header Connection '';
            proxy_http_version 1.1;
            proxy_buffering off;
            proxy_cache off;
            proxy_read_timeout 24h;
            proxy_send_timeout 24h;
            proxy_connect_timeout 60s;
            
            # Disable buffering for real-time streaming
            proxy_request_buffering off;
            
            # Handle connection errors
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 10s;
        }

        # Main proxy location for /{API_KEY}/mcp
        location ~ ^/(?<api_key>[^/]+)/mcp$ {
            # Handle preflight OPTIONS requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "*";
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
                add_header Access-Control-Allow-Headers "Content-Type, x-anycrawl-api-key, Authorization, X-Requested-With";
                add_header Access-Control-Max-Age 86400;
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }
            
            # Apply rate limiting for API connections
            limit_req zone=api burst=20 nodelay;
            
            # Validate API key format (basic validation)
            if ($api_key ~ "^[^a-zA-Z0-9_-]") {
                return 400 "Invalid API key format";
            }

            # Rewrite the request to include /mcp path
            rewrite ^/(?<api_key>[^/]+)/mcp$ /mcp break;
            
            # Proxy to backend server
            proxy_pass http://anycrawl_backend;
            
            # Add the API key as x-anycrawl-api-key header
            proxy_set_header x-anycrawl-api-key $api_key;
            
            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            
            # MCP specific headers
            proxy_set_header Connection '';
            proxy_http_version 1.1;
            proxy_buffering off;
            proxy_cache off;
            proxy_read_timeout 30s;
            proxy_send_timeout 30s;
            proxy_connect_timeout 30s;
            
            # Disable buffering for real-time streaming
            proxy_request_buffering off;
            
            # Handle connection errors
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 10s;
        }

        # Health check endpoint
        location /health {
            access_log off;
            proxy_pass http://anycrawl_backend/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Health check specific settings
            proxy_connect_timeout 5s;
            proxy_read_timeout 5s;
            proxy_send_timeout 5s;
        }

        # API endpoints (if needed for other MCP operations)
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://anycrawl_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Standard proxy settings
            proxy_connect_timeout 30s;
            proxy_read_timeout 30s;
            proxy_send_timeout 30s;
        }

        # Default location for other requests
        location / {
            return 404 "Not Found. Use /{API_KEY}/sse for SSE endpoint, /{API_KEY}/mcp for MCP endpoint, or /health for health check";
        }
    }
}
